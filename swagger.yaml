openapi: 3.0.0
info: 
  title: college-center-apis
  description: These apis are for my college-center application.
  version: 1.0.0
tags:
- name: "courses"
  description: This resource correlates directly to the records in the Courses database table (SQL). Each record contains a unique Course.
- name: "professors"
  description: Records of users, with role the "Professor", and the courses they are teaching. Each record contains a user id, course id and the record instance id (professorId). professorId does not equal userId.
- name: "users"
  description: Records of all users. Each record contains meta info about a user.

  
servers: 
  - url: http://localhost:4500/api/v1
  - url: http://localhost:4500/api/v2
paths:
 /userExist:
  get:
   tags: ["auth"]
   description: Check if a user with the email already exist or not
   parameters:
    - name: email
      in: query
      description: The parameter is the email the user is trying to use for registration & username
      required: true
      schema:
       type: string
   responses:
    "200":
     description: The GET operation on /userExist was successful.
     content:
      application/json:
       schema:
        type: object
        properties:
         userEmail:
          type: string
         userExist:
          type: boolean
 /register:
  post:
     tags: ["auth"]
     description: Path for user registration
     requestBody:
       description: Need to provide registration infos
       required: true
       content:
         application/json:
           schema:
             type: object
             properties:
               name:
                 type: string
               email:
                 type: string
               password:
                 type: string
               role: 
                 type: string
     responses:
       "200":
         description: The registration was successfull.
         content:
           application/json:
            schema:
             $ref: "#/components/schemas/userRecord"
 /login:
  post:
   tags: ["auth"]
   description: Get user credential
   requestBody:
    description: The body need to contain the user email and password
    required: true
    content:
     application/json:
      schema:
       type: object
       properties:
        email:
         type: string
        password:
         type: string
   responses:
    "200":
     description: The response will contain the user's email and password
     content:
      application/json:
       schema:
        type: object
        properties:
         credentials:
          type: object
          properties:
           AccessKeyId: 
            type: string
           Expiration:
            type: string
           SecretKey:
            type: string
           SessionToken:
            type: string
         user:
          type: object
          properties:
           aws_confirmed:
            type: boolean
           email:
            type: string
           enrolled:
            type: boolean
           id: 
            type: string
           role:
            type: string
 /confirm:
  put:
   tags: ["auth"]
   description: Confirm the AWS account and update the user record to confirmed
   requestBody:
    required: true
    content:
     application/json:
      schema:
       type: object
       properties:
        email:
         type: string
        confirmationCode:
         type: string
   responses:
    "200":
     description: Will return a boolean indicating successfully confirming account.
     content:
      application/json:
       schema:
        type: object
        properties:
         accountConfirmed: 
          type: boolean
 /courses:
  get:
   tags: ["courses"]
   summary: Return all Courses records
   responses:
    "200":
     description: Successfully returned all Courses records
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: "#/components/schemas/courseRecord" 
  post:
   tags: ["courses"]
   description: Create a new course
   summary: Create a new course
   requestBody:
    required: true
    content:
     application/json:
      schema:
       type: object
       properties:
        name:
         type: string
        description:
         type: string
   responses:
    "200":
     description: Successfully created the new course
     content:
      application/json:
       schema:
        $ref: "#/components/schemas/courseRecord"
 /courses/{courseId}:
  get:
   tags: ["courses"]
   summary: Return a unique Courses record
   parameters:
    - in: path
      required: true
      name: courseId
      schema:
       type: string
   responses:
    "200":
     description: The Courses record was found and returned successfully.
     content:
      application/json:
       schema:
        $ref: "#/components/schemas/courseRecord"
  delete:
   tags: ["courses"]
   summary: Delete a unique Courses record
   parameters:
   - in: path
     required: true
     name: courseId
     schema:
      type: string
   responses:
    "200":
     description: Successffuly deleted the Courses record
     content:
      application/json:
       schema:
        $ref: "#/components/schemas/courseRecord"
 /professors:
  get:
   tags: ["professors"]
   summary: Return all professors records
   responses:
    "200":
     description: Sucessfuly returned all professors records
     content:
      application/json:
       schema:
        $ref: "#/components/schemas/modifiedProfessorRecord"
  post:
   tags: ["professors"]
   summary: Create a unique Professors record
   requestBody:
    required: true
    content: 
     application/json:
      schema:
       type: object
       properties:
        userId:
         type: string
        courseId:
         type: string
   responses:
    "200":
     description: Return the created Professors record
     content:
      application/json:
       schema:
        $ref: "#/components/schemas/professorRecord"   
 /professors/{professorId}:
   get:
    tags: ["professors"]
    summary: Return the unique professor record
    parameters:
    - in: path
      required: true
      schema:
       type: string
      name: professorId
    responses:
     "200":
      description: Successfully returned a unique professor record.
      content:
       application/json:
        schema:
         $ref: "#/components/schemas/modifiedProfessorRecord"
   delete:
    summary: Delete a unique professor record
    tags: ["professors"]
    parameters:
     - in: path
       required: true
       name: professorId
       schema:
        type: string
    responses:
     "200":
      description: Successfully deleted a unique professor record.
      content:
       application/json:
        schema:
         $ref: "#/components/schemas/professorRecord"
 /users:
  get:
   tags: ["users"]
   summary: Return all Users records
   parameters:
   - in: query
     name: role
     allowEmptyValue: false
     schema:
      type: string
   - in: query
     name: aws_confirmed
     allowEmptyValue: false
     schema:
      type: string
   - in: query
     name: enrolled
     allowEmptyValue: false
     schema:
      type: string
   responses:
    "200":
     description: Successful returned all Users records.
     content:
      application/json:
       schema:
        type: array
        items:
          $ref: "#/components/schemas/userRecord"
 /users/{userId}:
  get: 
   tags: ["users"]
   description: Return the unique Users record.
   parameters:
   - in: path
     required: true
     name: userId
     schema:
      type: string
   responses:
    "200":
     description: Successfully return the unique Users record
     content: 
      application/json:
       schema:
        $ref: "#/components/schemas/userRecord"
  delete:
   tags: ["users"]
   summary: Delete a unique Users record
   parameters:
   - in: path
     name: userId
     required: true
     schema:
      type: string
   responses:
    "200":
     description: Successfully deleted the unique Users record
     content:
      application/json:
       schema:
        $ref: "#/components/schemas/userRecord"
         
         
    
components:
 schemas:
  userRecord:
   type: object
   properties:
    id:
     type: string
    emai:
     type: string
    name:
     type: string
    role:
     type: string
    aws_confirmed:
     type: string
    enrolled:
     type: string
  professorRecord:
   type: object
   properties:
    id: 
     type: string
    userId:
     type: string
    courseId:
     type: string
  modifiedProfessorRecord:
   type: array
   items:
    type: object
    properties:
     description:
      type: string
     courseId:
      type: string
     courseName: 
      type: string
     userId: 
      type: string
     userName:
      type: string
     userEmail:
      type: string
     professorId:
      type: string
  courseRecord:
   type: object
   properties:
    id:
     type: string
    name:
     type: string
    description:
     type: string
  courseProfessorRecord:
   type: object
   properties:
    id:
     type: string
    name:
     type: string
    description:
     type: string
    professorName:
     type: string
    professorEmail:
     type: string
    professorId:
     type: string
     description: professorId identify a unique record from the Professor table. It is not the foreign key that identify a user. A Professor record tells you what particular course a particular user with role "Professor" is teaching.
    userId:
     type: string
     description: userId is the id from the User table which identifies a unique user.
  
     
           
           
     
      
  
       
   
   
   
     
   
              
            
